@using Prova.Modelos

@inject TokenViewModel TokenViewModel
@inject Prova.Frontend.Helpers.CustomAuthStateProvider CustomAuthStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        @*<a href="Identity/Account/Manage">Olá old, @context.User.Identity.Name!</a>*@
        @*<a href="Identity/Account/Manage">@string.IsNullOrEmpty(TokenViewModel.Login) ? "Bem Vindo": $"Olá, {@TokenViewModel.Login}!"</a>*@
        @*<a href="Identity/Account/Manage">@ObterTexto()</a>*@
        <label>@ObterTexto()</label>
        @*<form method="post" action="Identity/Account/LogOut">*@
        @*<button type="submit" class="nav-link btn btn-link">Log out</button>*@
        @if (ExibirBotao)
        {
            <button @onclick="@(async () => await SubmitForm())" class="nav-link btn btn-link">Desconectar</button>
        }
        @*</form>*@
    </Authorized>
    <NotAuthorized>
        @*<a href="Identity/Account/Register">Register</a>*@
        @*<a href="Identity/Account/Login">Log in</a>*@
        <a href="/">Conectar</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool ExibirBotao = false;
    private async Task SubmitForm()
    {
        TokenViewModel = new TokenViewModel();
        await CustomAuthStateProvider.Logoff();

        NavigationManager.NavigateTo("/");
    }

    private string ObterTexto()
    {
        if (string.IsNullOrEmpty(TokenViewModel.Login))
        {
            ExibirBotao = false;
            return "Bem Vindo!";
        }
        else
        {
            ExibirBotao = true;
            return $"Olá, {TokenViewModel.Login}!";
        }
    }
}