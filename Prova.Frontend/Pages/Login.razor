@page "/"

@using Prova.Modelos
@using Microsoft.AspNetCore.Components.Authorization
@using Prova.Frontend.Servicos.Interfaces

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Prova.Frontend.Helpers.CustomAuthStateProvider CustomAuthStateProvider
@inject NavigationManager NavigationManager

@inject IUsuarioServices UsuarioServices

<h1>Login BlazorApp</h1>

<EditForm Model="@loginModel" OnValidSubmit="@SubmitForm" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="form-group">
            <label for="login">Login</label>
            <InputText id="login" @bind-Value="@loginModel.Login" class="form-control"/>
            <ValidationMessage For="@(() => loginModel.Login)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" name="password" placeholder="Password" class="form-control" @bind-value="@loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit">Conectar</button>

    </div>

    <ValidationMessage For="@(() => Mensagem)" />
</EditForm>

@code {

    private LoginModel loginModel = new LoginModel();

    public string Mensagem { get; set; } = "";
    private string StatusMessage;
    private string StatusClass;

    private async Task SubmitForm()
    {
        if (!string.IsNullOrEmpty(loginModel.Login) && !string.IsNullOrEmpty(loginModel.Password))
        {
            (UsuarioModel usuario, string mensagem) = await UsuarioServices.LoginAsync(loginModel.Login, loginModel.Password);

            Mensagem = mensagem;
            var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                Console.WriteLine($"{user.Identity.Name} is authenticated.");

                NavigationManager.NavigateTo("/notasdecompra");
            }
            else
            {
                Console.WriteLine("The user is NOT authenticated.");
            }

            StatusClass = "alert-info";
            StatusMessage = $"{DateTime.Now} {mensagem}";
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " Login Inválido";
    }
}
